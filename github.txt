协同修改 数据备份 版本管理 权限控制 历史记录 分支管理
svn 集中式 和服务器交互 单点故障
git 分布式 本地完整版本控制 不需要联网
              完整性保证：hash 快照指针分支
工作区git add 暂存区git commit 本地库
 代码托管中心 维护远程库
局域网gitlab
外网github
本地库push远程库clone（带初始化）本地库push（加入团队）远程库pull本地库
远程库fork远程库clone本地库push远程库pull request审核merge远程库pull本地库
git命令行操作
ll  ls -lA带隐藏资源  ls -l|less 
git init     .开头都是隐藏资源 .git项目子目录和隐藏文件，不要删除、胡乱修改
设置签名  用户名、邮箱区分开发人员 不是代码托管中心登录 
               项目级别：仅当前项目生效
               系统级别：操作系统用户
               都有项目级别生效
	二者都没有不允许
	git config user.name +...
	user.email不带参数项目级别
	git config --global + user.name/user.email
	cat .git/config
	cat ~/.gitconfig
git status 主命令子命令 
	no commit yet本地库
	track交给git（暂存区）
	vim 文件名
	i 输入 :wq保存退出
git add   git rm --cached (可撤销）s
git commit      message注释 
	:set nu    vim显示行号
	版本号、insertion行数
modified: ... 这时已经track了
	git add 来update git reset HEAD 还原
	git checkout -- ..还原历史
	git add and/or git commit -a
	git commit -m "..." good.txt
git log 查看历史 commit后面是hash   （HEAD->..)指针指向当前版本 空格向下翻页，b向上翻页 1退出
	git log --pretty=oneline（只显示HEAD后面的版本）
	git log --oneline一行显示省略hash
	git reflog 显示指针回到某版本需要移动的步数（显示全部的）

HEAD       可以回退、前进历史记录
	基于索引值 git reset --hard 简略索引值  选中就复制了
	使用^ 只能后退 git reset --hard HEAD^ 后面的多少个异或就回退多少个
	git reset --hard HEAD~3也可以  只能后退
	tail -n 3 ... 显示最后三行
git help
reset        --soft 只在本地库移动指针 显得暂存区也移了，所以modify绿字
	--mixed  在本地库移动指针 重置暂存区 显得工作区移了，所以modify红字
	--hard 三个区都改动
rm后再deleted，也可以git add/commit 会有个删除记录，文件还在本地库里
	git reset --hard 回到上个版本可以还原文件
	没提交本地库的删除git reset --hard HEAD 将工作区和暂存区搞成和本地库一样
	恢复的前提：删前的状态提交到了本地库
	git diff   以行为单位进行操作的，删除之前的行，添加修改后的行
	没有加别的参数表示和暂存区比较
	git diff HEAD[^] 和本地库当前/之前版本比较
分支管理 在版本控制的过程中，使用多条线同时推进多个任务。
               初始化好后，本身就有master分支 主干分支
               新分支从主干分支中复制出来(用来试错 开发过程彼此独立)
               开发失败时将对应分支删除即可
               开发完合并回主干 主干版本大升级
               主干有bug 创建hot_fix分支 因为线上项目服务器不会停
	git branch -v 查看所有分支
	git branch ...  创建新分支
	git checkout ... 切换到...分支
	（切换分支时发现同一个文件变了）
合并分支  切换到被合并接受修改的分支上
	git merge ...  将...的修改合并
	解决冲突  分支改了同一个文件同一个位置
	《《《《《《
	========
	》》》》》》 	
	自动切换手动合并
	删去异常符号，与人交流
	git add ...标记冲突已解决
	git commit 后面不加文件名退出merging
	（由于特殊符号的存在，此时暂时是不冲突的）
	（旧的往新的上合并，不然会显示update）
git 的基本原理
hash  一种加密算法  用来验证文件
	明文：文本、视频..各种文件 
	1.不管输入数据多大，得到结果都是一样大（非常复杂）
	2. 算法确定，输入确定，输出将不变
	3.输入有细微变化，输出有很大变化
	4.不能由明文反推暗文
	git 底层采用的是SHA—1算法
git 管理历史数据
	每次更新时对全部文件制作快照并保存索引 如果没有修改则不再重新存储，而是保留指向上一个文件的链接
	每次提交时创建提交对象    每个文件得到一个hash片段，所有hash片段和文件构成树对象，树对象本身有hash值，提交对象包含该树对象、作者、		父版本hash值，本身又有一个hash值 就是git log的hash值
	比特币就是一堆hash后的数据链
	
git分支管理的本质时创建和移动指针
	创建分支就是创建指针指向当前版本，切换分支就是移动HEAD指向相应指针 然后就分叉了，然后就合并了
远程库和本地库不一定叫一个名字 private库是收费的
	仓库页面复制http地址
	git remote -v 查看远程库地址
	git remote add 别名 远程库http地址
	git push 别名 要推的分支
	git clone +远程库地址    (好像可以本地库套本地库，master不一样)
	clone有三个效果
	1.把远程库下载到本地    2.创建远程库地址别名   3.初始化本地库
	只要是同一个账号登陆的，就算不同文件夹，也是直接push的
	凭据管理器会记住登录的账号密码，删掉就行了